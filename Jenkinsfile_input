def QUERY_RESULTS = [
    ["ENV": "DEV", "IMAGE": "jdk8-slim", "VERSION": "1.0"],
    ["ENV": "DEV", "IMAGE": "alpine", "VERSION": "1.2"],
    ["ENV": "DEV", "IMAGE": "buster", "VERSION": "1.6.2"]
]

def imageChoices = QUERY_RESULTS.collect { it.IMAGE }

pipeline {
    agent any

    parameters{
        [$class: 'ChoiceParameter',
         choiceType: 'PT_SINGLE_SELECT',
         description: 'Select an image:',
         filterLength: 1,
         filterable: true,
         name: 'SELECTED_IMAGE',
         randomName: 'choice-parameter-431960510873982',
         script: [
            $class: 'GroovyScript',
            fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["Error: No choice provided"]'
            ],
            script: [
                classpath: [],
                sandbox: false,
                script: '''
                    return ${imageChoices.inspect()}
                '''
            ],
            selectedValue: 'jdk8-slim',
            target: [
                name: 'SELECTED_IMAGE'
            ]
        ]],
        
        [$class: 'CascadeChoiceParameter',
         projectName: '',
         referencedParameters: 'SELECTED_IMAGE',
         description: 'Select a version:',
         name: 'SELECTED_VERSION',
         randomName: 'choice-parameter-91387418923652',
         script: [
            $class: 'GroovyScript',
            fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["Error: No choice provided"]'
            ],
            script: [
                classpath: [],
                sandbox: false,
                script: '''
                    def selectedImage = bindings['SELECTED_IMAGE']
                    def versionChoices = ${QUERY_RESULTS.inspect()}.
                        findAll { it.IMAGE == selectedImage }.
                        collect { it.VERSION }
                    return versionChoices
                '''
            ],
            selectedValue: '',
            target: [
                name: 'SELECTED_VERSION'
            ]
        ]]
    }
    
    stages {
        stage('Parameters') {
            steps {
                script {
                    def selectedImage = params.SELECTED_IMAGE
                    def selectedVersion = params.SELECTED_VERSION
                    
                    echo "Selected Image: ${selectedImage}"
                    echo "Selected Version: ${selectedVersion}"
                }
            }
        }
        
        // Add more stages as needed for your pipeline
    }
}
