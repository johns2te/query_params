//hardcoded json body in real scenario this would pulled down as a json file and assigned to variable
def QUERY_RESULTS = [
    ["ENV": "DEV", "IMAGE": "jdk8-slim", "VERSION": "1.0"],
    ["ENV": "DEV", "IMAGE": "alpine", "VERSION": "1.2"],
    ["ENV": "DEV", "IMAGE": "buster", "VERSION": "1.6.2"],
    ["ENV": "STAGE", "IMAGE": "nginx", "VERSION": "2.0"],
    ["ENV": "STAGE", "IMAGE": "ubuntu", "VERSION": "2.3"],
    ["ENV": "STAGE", "IMAGE": "tomcat", "VERSION": "3.1"],
    ["ENV": "PROD", "IMAGE": "mysql", "VERSION": "5.7"],
    ["ENV": "PROD", "IMAGE": "postgres", "VERSION": "9.6"],
    ["ENV": "PROD", "IMAGE": "redis", "VERSION": "4.0"]
]

// Define variables
List env_list = ['DEV','STAGE','PROD']
List dev_image_list = ['buster','alpine','jdk8-slim']
List stage_image_list = ['nginx','ubuntu','tomcat']
List default_item = ["\"Not Applicable\""]
String environment = buildScript(env_list)
String dev_images = buildScript(dev_image_list)
String stage_images= buildScript(stage_image_list)
String items = populateItems(default_item,dev_image_list,stage_image_list)
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateItems(List default_item, List devimagesList, List stageimagesList){
return """if(Environment.equals("DEV")){
     return $devimagesList
     }
     else if(Environment.equals("STAGE")){
     return $stageimagesList
     }else{
     return $default_item
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Environment', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false, script:  environment]]],
[$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Images', referencedParameters: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]]
    ])
])

//define pipeline actions
pipeline {
    agent any

    stages{
        stage('Parameters') {
            steps {
                    echo 'building..'
            }
        }
    }
        // Add more stages as needed for your pipeline
}
