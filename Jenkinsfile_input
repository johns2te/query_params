//hardcoded json body in real scenario this would pulled down as a json file and assigned to variable
import groovy.json.JsonSlurper

def url = new URL("https://storage.googleapis.com/tjohns-mysql-dump/query-results/query.json")
def json = url.getText()

String buildScript(List values){
  return "return $values"
}

def populateImages(jsonArray, environments) {
    def list_images = []
    list_images = jsonArray.findAll { it.ENV == Environment }.collect { "'$it.IMAGE'" }
    return list_images 
}

def populateVersions(jsonArray, environments, images) {
    def versions = []
    if (environments.contains(Environment) && images.contains(Image)) {
        versions = jsonArray.findAll { it.ENV == Environment && it.IMAGE == Image }.collect { it.VERSION }
    }
    return versions ?: 'Not Applicable'
}

List environments_list = ["'DEV'", "'STAGE'", "'PROD'"]
def jsonSlurper = new JsonSlurper()
def jsonArray = jsonSlurper.parseText(json)

String environments = buildScript(environments_list)
String images = buildScript(populateImages(jsonArray, environments_list))
//String versions = populateVersions(jsonArray, environments, images)



// Properties step to set the Active choice parameters via 
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Environment', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false, script: environments]]],
[$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Image', referencedParameters: 'Environment', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: images]]]
    ])
])

//define pipeline actions
pipeline {
    agent any

    stages{
        stage('Parameters') {
            steps {
                    echo 'building..'
            }
        }
    }
        // Add more stages as needed for your pipeline
}
