library 'cb-days@master'

def url = "https://storage.googleapis.com/tjohns-mysql-dump/query-results/query.json"
def jsonArray = slurpStorage(url)

// Define variables
List env_list = ["\'DEV\'","\'STAGE\'","\'PROD\'"]
List default_item = ["\'Not Applicable\'"]
String environments = buildScript(env_list)
String images = populateImages(default_item)
String versions = populateVersions(default_item)
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateImages(List default_item){
    return """if(Environments.in(environments)){
     def imageNames = jsonArray.findAll { it.ENV == Environments }.collect { it.IMAGE }
     return imagNames
     }
     }else{
     return $default_item
     }
     """
}
String populateVersions(List default_item){
    return """if(Environments.in(environments)){
     def imageVersions = jsonArray.findAll { it.ENV == Environments }.collect { it.VERSION }
     return imageVersions
     }
     }else{
     return $default_item
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Environments', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false, script: environments]]],
[$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Images', referencedParameters: 'Environments', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: images]]]
    ])
])

//define pipeline actions
pipeline {
    agent any

    stages{
        stage('Parameters') {
            steps {
                    echo 'building..'
            }
        }
    }
        // Add more stages as needed for your pipeline
}
